package com.example.watchimurecorder.data

import kotlinx.serialization.Serializable

/**
 * Data class representing a single IMU sensor reading
 */
@Serializable
data class SensorReading(
    val timestamp: Long,
    val accelerometerX: Float,
    val accelerometerY: Float,
    val accelerometerZ: Float,
    val gyroscopeX: Float,
    val gyroscopeY: Float,
    val gyroscopeZ: Float,
    val magnetometerX: Float? = null,
    val magnetometerY: Float? = null,
    val magnetometerZ: Float? = null
) {
    /**
     * Convert to CSV format
     */
    fun toCsvRow(): String {
        return "$timestamp,$accelerometerX,$accelerometerY,$accelerometerZ," +
                "$gyroscopeX,$gyroscopeY,$gyroscopeZ," +
                "${magnetometerX ?: ""}," +
                "${magnetometerY ?: ""}," +
                "${magnetometerZ ?: ""}"
    }

    companion object {
        /**
         * CSV header for the sensor data
         */
        const val CSV_HEADER = "timestamp,accel_x,accel_y,accel_z,gyro_x,gyro_y,gyro_z,mag_x,mag_y,mag_z"
    }
}

/**
 * Data class for recording session metadata
 */
@Serializable
data class RecordingSession(
    val sessionId: String,
    val startTime: Long,
    val endTime: Long? = null,
    val sampleCount: Int = 0,
    val deviceId: String
) {
    fun toCsvMetadata(): String {
        return "# Session ID: $sessionId\n" +
                "# Device ID: $deviceId\n" +
                "# Start Time: $startTime\n" +
                "# End Time: ${endTime ?: "N/A"}\n" +
                "# Sample Count: $sampleCount\n" +
                "# Generated by Watch IMU Recorder\n"
    }
}

/**
 * Enum for recording states
 */
enum class RecordingState {
    IDLE,
    RECORDING,
    STOPPING
}

/**
 * Data class for server status
 */
data class ServerStatus(
    val isRunning: Boolean,
    val ipAddress: String?,
    val port: Int,
    val recordingState: RecordingState = RecordingState.IDLE
)